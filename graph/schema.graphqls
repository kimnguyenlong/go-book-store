# GraphQL schema example
#
# https://gqlgen.com/getting-started/

### Objects
type Author {
  id: ID!
  name: String!
  created: Int!
  updated: Int!
  #
  books: [Book!]!
}

enum Role {
  ADMIN
  CLIENT
}

type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  role: Role!
  created: Int!
  updated: Int!
}

type Topic {
  id: ID!
  name: String!
  created: Int!
  updated: Int!
  #
  books: [Book!]!
}

type Book {
  id: ID!
  name: String!
  price: Float!
  content: String!
  created: Int!
  updated: Int!
  topicsId: [ID!]!
  authorsId: [ID!]!
  #
  topics: [Topic!]!
  authors: [Author!]!
  reviews: [Review!]!
}

type Review {
  id: ID!
  content: String!
  created: Int!
  updated: Int!
  bookId: ID!
  userId: ID!
}

type CartItem {
  bookId: ID!
  quantity: Int!
  book: Book!
}

type Cart {
  id: ID!
  userId: ID!
  items: [CartItem!]!
}

type WishList {
  id: ID!
  userId: ID!
  booksId: [ID!]!
  books: [Book!]!
}

### Input
input NewAuthor {
  name: String!
}

input NewUser {
  name: String!
  email: String!
  password: String!
  role: Role!
}

input NewTopic {
  name: String!
}

input NewBook {
  name: String!
  price: Float!
  content: String!
  topicsId: [ID!]!
  authorsId: [ID!]!
}

input NewReview {
  content: String!
  bookId: ID!
}

input Login {
  email: String!
  password: String!
}

input CartDataItem {
  bookId: ID!
  quantity: Int!
}

input CartData {
  items: [CartDataItem!]!
}

input WishListUpdate {
  add: [ID!]
  remove: [ID!]
}

### Query
type Query {
  login(input: Login): String!
  authors: [Author!]!
  topics: [Topic!]!
  books: [Book!]!
  cart: Cart!
  wishList: WishList!
}

### Mutation
type Mutation {
  createAuthor(input: NewAuthor!): Author!

  createUser(input: NewUser!): User!

  createTopic(input: NewTopic!): Topic!

  createBook(input: NewBook!): Book!

  createReview(input: NewReview!): Review!

  setCart(input: CartData!): Cart!

  updateWishList(input: WishListUpdate!): WishList!
}
