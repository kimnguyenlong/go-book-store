// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Author struct {
	ID      string  `json:"id" bson:"_id"`
	Name    string  `json:"name"`
	Created int64   `json:"created"`
	Updated int64   `json:"updated"`
	Books   []*Book `json:"books"`
}

type Book struct {
	ID        string    `json:"id" bson:"_id"`
	Name      string    `json:"name"`
	Price     float64   `json:"price"`
	Content   string    `json:"content"`
	Created   int64     `json:"created"`
	Updated   int64     `json:"updated"`
	TopicsID  []string  `json:"topicsId"`
	AuthorsID []string  `json:"authorsId"`
	Topics    []*Topic  `json:"topics"`
	Authors   []*Author `json:"authors"`
	Reviews   []*Review `json:"reviews"`
}

type BookUpdate struct {
	Name              *string  `json:"name"`
	Content           *string  `json:"content"`
	AddingTopicsID    []string `json:"addingTopicsId"`
	RemovingTopicsID  []string `json:"removingTopicsId"`
	AddingAuthorsID   []string `json:"addingAuthorsId"`
	RemovingAuthorsID []string `json:"removingAuthorsId"`
}

type Cart struct {
	ID     string      `json:"id" bson:"_id"`
	UserID string      `json:"userId"`
	Items  []*CartItem `json:"items"`
}

type CartData struct {
	Items []*CartDataItem `json:"items"`
}

type CartDataItem struct {
	BookID   string `json:"bookId"`
	Quantity int64  `json:"quantity"`
}

type CartItem struct {
	BookID   string `json:"bookId"`
	Quantity int64  `json:"quantity"`
	Book     *Book  `json:"book"`
}

type Login struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type NewAuthor struct {
	Name string `json:"name"`
}

type NewBook struct {
	Name      string   `json:"name"`
	Price     float64  `json:"price"`
	Content   string   `json:"content"`
	TopicsID  []string `json:"topicsId"`
	AuthorsID []string `json:"authorsId"`
}

type NewReview struct {
	Content string `json:"content"`
	BookID  string `json:"bookId"`
}

type NewTopic struct {
	Name string `json:"name"`
}

type NewUser struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     Role   `json:"role"`
}

type Review struct {
	ID      string `json:"id" bson:"_id"`
	Content string `json:"content"`
	Created int64  `json:"created"`
	Updated int64  `json:"updated"`
	BookID  string `json:"bookId"`
	UserID  string `json:"userId"`
}

type Topic struct {
	ID      string  `json:"id" bson:"_id"`
	Name    string  `json:"name"`
	Created int64   `json:"created"`
	Updated int64   `json:"updated"`
	Books   []*Book `json:"books"`
}

type User struct {
	ID       string `json:"id" bson:"_id"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
	Role     Role   `json:"role"`
	Created  int64  `json:"created"`
	Updated  int64  `json:"updated"`
}

type WishList struct {
	ID      string   `json:"id" bson:"_id"`
	UserID  string   `json:"userId"`
	BooksID []string `json:"booksId"`
	Books   []*Book  `json:"books"`
}

type WishListUpdate struct {
	Add    []string `json:"add"`
	Remove []string `json:"remove"`
}

type Role string

const (
	RoleAdmin  Role = "ADMIN"
	RoleClient Role = "CLIENT"
)

var AllRole = []Role{
	RoleAdmin,
	RoleClient,
}

func (e Role) IsValid() bool {
	switch e {
	case RoleAdmin, RoleClient:
		return true
	}
	return false
}

func (e Role) String() string {
	return string(e)
}

func (e *Role) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Role(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Role", str)
	}
	return nil
}

func (e Role) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
